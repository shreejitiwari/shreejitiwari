# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13XyzwRIfDLUKmXQ9Tdcoifgh3TvcdDC8

#2. Data Analysis in Python

##Read the Data
To read the data frame into Python, you will need to import Pandas first. Then, you can read the file and create a data frame with the following lines of code:
"""

import pandas as pd
df = pd.read_csv('diabetes.csv')

"""## Check the head of the data frame, run:"""

df.head()

"""From the above output, you can see 9 different variables related to a patientâ€™s health.

##Pandas Profiling
This is a very useful tool that can be used by analysts. It generates an analysis report on the data frame, and helps you better understand the correlation between variables.

To generate a Pandas Profiling report, run the following lines of code:
"""

!pip install pandas-profiling

import pandas_profiling as pp
pp.ProfileReport(df)

"""##Visualizing the Outcome Variable
First, run the following lines of code to import Matplotlib, Seaborn, Numpy, and Plotly after installation:
"""

# Visualization Imports
import matplotlib.pyplot as plt
import seaborn as sns
color = sns.color_palette()
get_ipython().run_line_magic('matplotlib', 'inline')
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls
import plotly.express as px
import numpy as np

"""Next, run the following lines of code to create a pie chart visualizing the outcome variable:"""

dist = df['Outcome'].value_counts()
colors = ['mediumturquoise', 'darkorange']
trace = go.Pie(values=(np.array(dist)),labels=dist.index)
layout = go.Layout(title='Diabetes Outcome')
data = [trace]
fig = go.Figure(trace,layout)
fig.update_traces(marker=dict(colors=colors, line=dict(color='#000000', width=2)))
fig.show(renderer="colab")

"""Correlation Matrix with Plotly
Similar to the correlation matrix generated in Pandas Profiling, we can create one using Plotly:
"""

def df_to_plotly(df):
    return {'z': df.values.tolist(),
            'x': df.columns.tolist(),
            'y': df.index.tolist() }
import plotly.graph_objects as go
dfNew = df.corr()
fig = go.Figure(data=go.Heatmap(df_to_plotly(dfNew)))
fig.show(renderer="colab")

"""Visualize Glucose Levels and Insulin"""

fig = px.scatter(df, x='Glucose', y='Insulin')
fig.update_traces(marker_color="turquoise",marker_line_color='rgb(8,48,107)',
                  marker_line_width=1.5)
fig.update_layout(title_text='Glucose and Insulin')
fig.show(renderer="colab")